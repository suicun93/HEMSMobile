package AView;import androidx.appcompat.app.AppCompatActivity;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;import android.app.TimePickerDialog;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.view.View;import android.view.WindowManager;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.Spinner;import android.widget.TableLayout;import android.widget.TextView;import android.widget.TimePicker;import android.widget.Toast;import com.sonycsl.echo.eoj.device.DeviceObject;import com.sonycsl.echo.eoj.device.housingfacilities.Battery;import com.sonycsl.echo.eoj.device.housingfacilities.ElectricVehicle;import com.sonycsl.echo.eoj.device.housingfacilities.HouseholdSolarPowerGeneration;import java.io.IOException;import java.util.Calendar;import Main.EchoController;import Model.MyEchoDevices;import Model.OperationMode;import static Model.MyEchoDevices.BATTERY;import static Model.MyEchoDevices.EV;import static Model.MyEchoDevices.SOLAR;import static Model.MyEchoDevices.UNKNOWN;public class DeviceActivity extends AppCompatActivity {      private Intent intent;      private DeviceObject deviceObject = null;      private String positionString = "";      private TimePickerDialog picker;      private TableLayout configLayout;      private Button configButton, onButton, offButton;      private TextView deviceNameBar,                deviceName,                ipAddressTxt,                operationStateTxt,                operationModeTxt,                instantaneousTxt,                currentElectricTxt,                currentPercentTxt;      private EditText startTime, endTime, instantaneousEditText;      private Spinner spinner;      private ImageView deviceImage;      private OperationMode[] operationModeOptions = new OperationMode[]{OperationMode.Charging, OperationMode.RapidCharging, OperationMode.Discharging};      @Override      protected void onCreate(Bundle savedInstanceState) {            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);            intent = getIntent();            super.onCreate(savedInstanceState);            setContentView(R.layout.activity_device);            setupUI();            // Get device's position from parent            positionString = intent.getStringExtra("device");            try {                  int position = Integer.parseInt(positionString);                  deviceObject = EchoController.listDevice().get(position);                  // Refresh when scroll down                  final SwipeRefreshLayout pullToRefresh = findViewById(R.id.pullToRefresh);                  pullToRefresh.setOnRefreshListener(() -> {                        refresh(); // your code                        pullToRefresh.setRefreshing(false);                  });                  // Refresh UI                  refresh();            } catch (NumberFormatException e) {                  System.out.println(positionString + " " + e.getMessage());                  Toast.makeText(this, "Error: Position = " + positionString, Toast.LENGTH_SHORT).show();            }      }      private void setupUI() {            // 1 Spinner            spinner = findViewById(R.id.spinner);            ArrayAdapter<OperationMode> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_dropdown_item, operationModeOptions);            spinner.setAdapter(adapter);            // 1 Image            deviceImage = findViewById(R.id.device_img2);            // 1 Layout            configLayout = findViewById(R.id.config_layout);            // 3 Buttons            onButton = findViewById(R.id.on_btn);            offButton = findViewById(R.id.off_btn);            configButton = findViewById(R.id.config_btn);            // 3 Edit texts            startTime = findViewById(R.id.start_time_txt);            endTime = findViewById(R.id.end_time_txt);            instantaneousEditText = findViewById(R.id.instantaneous_edit_text);            // Otherwise, text view            deviceNameBar = findViewById(R.id.name_bar_txt);            deviceName = findViewById(R.id.name2_txt);            ipAddressTxt = findViewById(R.id.ip_address2_txt);            operationStateTxt = findViewById(R.id.operation_status2_txt);            operationModeTxt = findViewById(R.id.operation_mode2_txt);            instantaneousTxt = findViewById(R.id.instantaneous2_txt);            currentElectricTxt = findViewById(R.id.current2_txt);            currentPercentTxt = findViewById(R.id.current_percent2_txt);      }      private void refresh() {            if (deviceObject != null) {                  MyEchoDevices device = MyEchoDevices.from(deviceObject);                  if (device != MyEchoDevices.UNKNOWN) {                        try {                              switch (device) {                                    case BATTERY:                                          synchronized (BATTERY) {                                                ((Battery) deviceObject).get().reqGetOperationStatus().send(); // 80                                                ((Battery) deviceObject).get().reqGetOperationModeSetting().send(); // DA                                                ((Battery) deviceObject).get().reqGetMeasuredInstantaneousChargeDischargeElectricEnergy().send(); // D3                                                ((Battery) deviceObject).get().reqGetRemainingStoredElectricity1().send(); // E2                                                BATTERY.wait();                                                ((Battery) deviceObject).get().reqGetRemainingStoredElectricity3().send(); // E4                                                BATTERY.wait();                                          }                                          break;                                    case EV:                                          synchronized (EV) {                                                ((ElectricVehicle) deviceObject).get().reqGetOperationStatus().send(); // 80                                                ((ElectricVehicle) deviceObject).get().reqGetOperationModeSetting().send(); // DA                                                ((ElectricVehicle) deviceObject).get().reqGetMeasuredInstantaneousChargeDischargeElectricEnergy().send(); // D3                                                ((ElectricVehicle) deviceObject).get().reqGetRemainingBatteryCapacity1().send(); // E2                                                EV.wait();                                                ((ElectricVehicle) deviceObject).get().reqGetRemainingBatteryCapacity3().send(); // E4                                                EV.wait();                                          }                                          break;                                    case SOLAR:                                          ((HouseholdSolarPowerGeneration) deviceObject).get().reqGetOperationStatus().send(); // 80                                          ((HouseholdSolarPowerGeneration) deviceObject).get().reqGetMeasuredInstantaneousAmountOfElectricityGenerated().send(); // E0                                          ((HouseholdSolarPowerGeneration) deviceObject).get().reqGetMeasuredCumulativeAmountOfElectricityGenerated().send(); // E1                                          synchronized (SOLAR) {                                                SOLAR.wait();                                          }                                          break;                                    case LIGHT:                                          deviceObject.get().reqGetOperationStatus().send(); // 80                                          break;                              }                        } catch (IOException | InterruptedException e) {                              deviceNameBar.setText(device.name());                              deviceName.setText(device.name());                              ipAddressTxt.setText(getTextResource(R.string.ip_address_string) + deviceObject.getNode().getAddressStr());                              operationStateTxt.setText("エラー: " + e.getMessage());                              return;                        }                  }                  // Name                  deviceNameBar.setText(device.name());                  deviceName.setText(device.name());                  // IP Address                  ipAddressTxt.setText(getTextResource(R.string.ip_address_string) + deviceObject.getNode().getAddressStr());                  // operation status                  operationStateTxt.setText(getTextResource(R.string.operation_status_string) + device.operationStatus.name());                  // Image                  // Set Image                  if (device != UNKNOWN) {                        deviceImage.setImageResource(device.image());                  }                  // operation mode, current, current percentage, instantaneous                  // config layout                  switch (device) {                        case EV:                        case BATTERY:                              operationModeTxt.setVisibility(View.VISIBLE);                              instantaneousTxt.setVisibility(View.VISIBLE);                              currentElectricTxt.setVisibility(View.VISIBLE);                              currentPercentTxt.setVisibility(View.VISIBLE);                              configLayout.setVisibility(View.VISIBLE);                              operationModeTxt.setText(getTextResource(R.string.operation_mode_string) + device.operationMode.name());                              instantaneousTxt.setText(getTextResource(R.string.instantaneous_string) + device.d3 + " W");                              currentElectricTxt.setText(getTextResource(R.string.current_electric_string) + device.e2 + " Wh");                              currentPercentTxt.setText(getTextResource(R.string.current_percentage_string) + device.e4 + " %");                              break;                        case SOLAR:                              operationModeTxt.setVisibility(View.GONE);                              findViewById(R.id.mode_schedule_text).setVisibility(View.GONE);                              spinner.setVisibility(View.GONE);                              instantaneousTxt.setVisibility(View.VISIBLE);                              currentElectricTxt.setVisibility(View.VISIBLE);                              configLayout.setVisibility(View.VISIBLE);                              instantaneousTxt.setText(getTextResource(R.string.instantaneous_string) + +device.e0 + " W");                              currentElectricTxt.setText(getTextResource(R.string.current_electric_string) + device.e1 + " Wh");                              break;                        default:                              break;                  }            } else {                  Toast.makeText(this, "Error: Position = " + positionString, Toast.LENGTH_SHORT).show();            }      }      private String getTextResource(int id) {            return getResources().getString(id).replace("分からない", "");      }      public void backPreviousActivity(View v) {            super.finish();      }      public void selectTime(View v) {            if (!(v instanceof EditText)) {                  return;            }            final Calendar calendar = Calendar.getInstance();            int hour = calendar.get(Calendar.HOUR_OF_DAY);            int minutes = calendar.get(Calendar.MINUTE);            // time picker dialog            picker = new TimePickerDialog(DeviceActivity.this,                      new TimePickerDialog.OnTimeSetListener() {                            @Override                            public void onTimeSet(TimePicker tp, int sHour, int sMinute) {                                  ((EditText) v).setText(sHour + ":" + sMinute);                            }                      }, hour, minutes, true);            picker.setCanceledOnTouchOutside(true);            picker.setIcon(R.drawable.back_button);            picker.setTitle("時間を選択する");            picker.setButton(DialogInterface.BUTTON_POSITIVE, "選択する", picker);            picker.setButton(DialogInterface.BUTTON_NEGATIVE, "キャンセル", picker);            picker.show();      }}