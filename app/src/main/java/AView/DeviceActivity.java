package AView;import android.annotation.SuppressLint;import android.app.TimePickerDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.Spinner;import android.widget.TableLayout;import android.widget.TextView;import android.widget.TimePicker;import android.widget.Toast;import androidx.annotation.LayoutRes;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;import com.sonycsl.echo.EchoProperty;import com.sonycsl.echo.eoj.device.DeviceObject;import com.sonycsl.echo.eoj.device.housingfacilities.Battery;import com.sonycsl.echo.eoj.device.housingfacilities.ElectricVehicle;import com.sonycsl.echo.eoj.device.housingfacilities.GeneralLighting;import com.sonycsl.echo.eoj.device.housingfacilities.HouseholdSolarPowerGeneration;import java.util.ArrayList;import java.util.Calendar;import Common.Constants;import Common.Convert;import Main.EchoController;import Model.MyEchoDevices;import Model.OperationMode;import Model.OperationStatus;import Receiver.MyBatteryReceiver;import Receiver.MyElectricVehicleReceiver;import Receiver.MyLightReceiver;import Receiver.MySolarReceiver;import Receiver.ResultControllable;import static android.view.HapticFeedbackConstants.VIRTUAL_KEY;import static com.sonycsl.echo.eoj.device.DeviceObject.EDT_OPERATION_STATUS_OFF;import static com.sonycsl.echo.eoj.device.DeviceObject.EDT_OPERATION_STATUS_ON;import static java.util.Objects.requireNonNull;public class DeviceActivity extends AppCompatActivity {      private static final int ERROR = -1;      private DeviceObject deviceObject = null;      private TableLayout configLayout;      private Button configButton;      private boolean configButtonInstalled = false;      private boolean UIReady = false;      private byte[] EDT = null;      private MyEchoDevices device;      private ArrayList<EchoProperty> echoPropertyList;      private TextView deviceNameBar,                deviceName,                ipAddressTxt,                operationStatusTxt,                operationModeTxt,                instantaneousTxt,                currentElectricTxt,                currentPercentTxt;      private EditText startTime, endTime, instantaneousEditText;      private Spinner spinner;      private ImageView deviceImage;      private OperationMode[] operationModeOptions = new OperationMode[]{                OperationMode.Charging,                OperationMode.RapidCharging,                OperationMode.Discharging      };      @Override      protected void onCreate(Bundle savedInstanceState) {            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);            super.onCreate(savedInstanceState);            setContentView(R.layout.activity_device);            // Get device's information from parent and validate device            Intent intent = getIntent();            String positionString = intent.getStringExtra(Constants.PositionKey.value);            String ipString = intent.getStringExtra(Constants.IpAddressKey.value);            short eojShort = intent.getShortExtra(Constants.EOJKey.value, (short) 0x0000);            // Check Device is ready or not            try {                  int position = Integer.parseInt(requireNonNull(positionString));                  deviceObject = EchoController.listDevice.get(position);                  if ((deviceObject == null)                            || (deviceObject.getEchoClassCode() != eojShort)                            || !deviceObject.getNode().getAddressStr().equalsIgnoreCase(ipString)) {                        throw new Exception("Device disconnected.");                  }                  // If device is ready:                  // Refresh UI                  setupUI();                  fillData();            } catch (Exception e) {                  Log.e(Constants.ECHO_TAG, "onCreate: Error: Position = " + positionString, e);                  alertDeviceDisconnected();                  backPreviousActivity(null);            }            // Handle result when set EPC (Event Oriented Programming)            if (deviceObject.getReceiver() instanceof ResultControllable) {                  ((ResultControllable) deviceObject.getReceiver()).setOnReceive(                            (success, echoProperty) -> { // on Set EPC                                  String notification = success ? getString(R.string.set_epc_success) : getString(R.string.set_epc_fail);                                  runOnUiThread(() -> Toast.makeText(DeviceActivity.this, notification, Toast.LENGTH_SHORT).show());                                  if (success) sendRequestToUpdateData();                            },                            (success, echoProperty) -> { // on Get EPC                                  runOnUiThread(() -> {                                        try {                                              updateData(success, echoProperty);                                        } catch (Exception e) {                                              Log.e(Constants.ECHO_TAG, "onCreate: UI dissappeared", e);                                        }                                  });                            }                  );            }            // Refresh when scroll down            final SwipeRefreshLayout pullToRefresh = findViewById(R.id.pullToRefresh);            pullToRefresh.setOnRefreshListener(() -> {                  pullToRefresh.performHapticFeedback(VIRTUAL_KEY);                  sendRequestToUpdateData();                  pullToRefresh.setRefreshing(false);            });      }      @SuppressLint({"TextCanBeConcatenated", "SetTextI18n"})      private void fillData() {            device = MyEchoDevices.from(deviceObject);            // Name            deviceNameBar.setText(getString(device.name));            deviceName.setText(getString(device.name));            // IP Address            ipAddressTxt.setText(getTextResourceWithoutUnknown(R.string.ip_address_string) + deviceObject.getNode().getAddressStr());            // Image            deviceImage.setImageResource(device.image);            // Operation mode, current, current percentage, instantaneous            switch (deviceObject.getEchoClassCode()) {                  case ElectricVehicle.ECHO_CLASS_CODE:                        MyElectricVehicleReceiver myElectricVehicleReceiver = (MyElectricVehicleReceiver) deviceObject.getReceiver();                        operationModeTxt.setVisibility(View.VISIBLE);                        instantaneousTxt.setVisibility(View.VISIBLE);                        currentElectricTxt.setVisibility(View.VISIBLE);                        currentPercentTxt.setVisibility(View.VISIBLE);                        configLayout.setVisibility(View.VISIBLE);                        setOperationStatusTxt(myElectricVehicleReceiver.getOperationStatus());                        setOperationModeTxt(myElectricVehicleReceiver.getOperationMode());                        setInstantaneousTxt(myElectricVehicleReceiver.getInstantaneous());                        setCurrentElectricTxt(myElectricVehicleReceiver.getCurrentElectricEnergy());                        setCurrentPercentTxt(myElectricVehicleReceiver.getPercentCurrent());                        break;                  case Battery.ECHO_CLASS_CODE:                        MyBatteryReceiver myBatteryReceiver = (MyBatteryReceiver) deviceObject.getReceiver();                        operationModeTxt.setVisibility(View.VISIBLE);                        instantaneousTxt.setVisibility(View.VISIBLE);                        currentElectricTxt.setVisibility(View.VISIBLE);                        currentPercentTxt.setVisibility(View.VISIBLE);                        configLayout.setVisibility(View.VISIBLE);                        setOperationStatusTxt(myBatteryReceiver.getOperationStatus());                        setOperationModeTxt(myBatteryReceiver.getOperationMode());                        setInstantaneousTxt(myBatteryReceiver.getInstantaneous());                        setCurrentElectricTxt(myBatteryReceiver.getCurrentElectricEnergy());                        setCurrentPercentTxt(myBatteryReceiver.getPercentCurrent());                        break;                  case HouseholdSolarPowerGeneration.ECHO_CLASS_CODE:                        MySolarReceiver mySolarReceiver = (MySolarReceiver) deviceObject.getReceiver();                        operationModeTxt.setVisibility(View.GONE);                        findViewById(R.id.mode_schedule_text).setVisibility(View.GONE);                        spinner.setVisibility(View.GONE);                        instantaneousTxt.setVisibility(View.VISIBLE);                        currentElectricTxt.setVisibility(View.VISIBLE);                        configLayout.setVisibility(View.VISIBLE);                        setOperationStatusTxt(mySolarReceiver.getOperationStatus());                        setInstantaneousTxt(mySolarReceiver.getInstantaneous());                        setCurrentElectricTxt(mySolarReceiver.getCurrentElectricEnergy());                        break;                  case GeneralLighting.ECHO_CLASS_CODE:                        MyLightReceiver myLightReceiver = (MyLightReceiver) deviceObject.getReceiver();                        setOperationStatusTxt(myLightReceiver.getOperationStatus());                  default:                        break;            }            // Config button            if (!configButtonInstalled) {                  configButton.setOnClickListener(v -> {                        v.performHapticFeedback(VIRTUAL_KEY);                        // Get Data: start time, end time, state, instantaneous value                        String startTimeString = startTime.getText().toString();                        String endTimeString = endTime.getText().toString();                        String instantaneousString = instantaneousEditText.getText().toString();                        String[] startTimeArray = startTimeString.split(":");                        String[] endTimeArray = endTimeString.split(":");                        if (startTimeArray.length != 2 || endTimeArray.length != 2) {                              Toast.makeText(DeviceActivity.this, getString(R.string.reenter_time), Toast.LENGTH_SHORT).show();                              return;                        }                        if (instantaneousString.length() <= 0) {                              Toast.makeText(DeviceActivity.this, getString(R.string.reenter_instantaneous_value), Toast.LENGTH_SHORT).show();                              return;                        }                        try {                              // Convert to int.                              int startHour = Integer.parseInt(startTimeArray[0].trim());                              int startMinute = Integer.parseInt(startTimeArray[1].trim());                              int endHour = Integer.parseInt(endTimeArray[0].trim());                              int endMinute = Integer.parseInt(endTimeArray[1].trim());                              int instantaneous = Integer.parseInt(instantaneousString);                              OperationMode selectedMode = (OperationMode) spinner.getSelectedItem();                              // Check range of value                              if (startHour < 0 || startHour > 23 ||                                        endHour < 0 || endHour > 23 ||                                        startMinute < 0 || startMinute > 60 ||                                        endMinute < 0 || endMinute > 60 ||                                        instantaneous < 0 || instantaneous > Constants.MAX_ENERGY_EV_BATT                              )                                    throw new NumberFormatException(getString(R.string.data_out_of_range));                              // https://echonet.jp/wp/wp-content/uploads/pdf/General/Standard/Release/Release_L_en/Appendix_Release_L_E.pdf#page=286                              // Solar's Instantaneous < 65533                              if (deviceObject.getEchoClassCode() == HouseholdSolarPowerGeneration.ECHO_CLASS_CODE)                                    if (instantaneous > Constants.MAX_ENERGY_SOLAR)                                          throw new NumberFormatException(getString(R.string.data_out_of_range));                              // Convert to byte                              byte startHourByte = Convert.intToByte(startHour);                              byte startMinuteByte = Convert.intToByte(startMinute);                              byte endHourByte = Convert.intToByte(endHour);                              byte endMinuteByte = Convert.intToByte(endMinute);                              byte selectedModeByte = selectedMode.value;                              byte[] instantaneousByte = Convert.intToByteArray(instantaneous);                              // Merge byte to byte array                              switch (device) {                                    case EV:                                    case BATTERY:                                          EDT = new byte[9];                                          EDT[8] = instantaneousByte[3];                                          EDT[7] = instantaneousByte[2];                                          EDT[6] = instantaneousByte[1];                                          EDT[5] = instantaneousByte[0];                                          EDT[4] = selectedModeByte;                                          EDT[3] = endMinuteByte;                                          EDT[2] = endHourByte;                                          EDT[1] = startMinuteByte;                                          EDT[0] = startHourByte;                                          break;                                    case SOLAR:                                          EDT = new byte[6];                                          EDT[5] = instantaneousByte[3];                                          EDT[4] = instantaneousByte[2];                                          EDT[3] = endMinuteByte;                                          EDT[2] = endHourByte;                                          EDT[1] = startMinuteByte;                                          EDT[0] = startHourByte;                                          break;                                    default:                                          break;                              }                              // Send EPC                              new Thread(() -> {                                    try {                                          deviceObject.set().reqSetProperty(Constants.SCHEDULE_CONFIG_EPC, EDT).send();                                    } catch (Exception e) {                                          runOnUiThread(this::alertDeviceDisconnected);                                    }                              }).start();                                    // Send EPC                        } catch (NumberFormatException e) {                              Toast.makeText(DeviceActivity.this, getString(R.string.data_invalid) + e.getMessage(), Toast.LENGTH_SHORT).show();                        } catch (Exception e) {                              Log.e(Constants.ECHO_TAG, "fillData: Exception", e);                              alertDeviceDisconnected();                        }                  });                  configButtonInstalled = true;            }      }      private void sendRequestToUpdateData() {            if (echoPropertyList == null) {                  echoPropertyList = new ArrayList<>();                  switch (deviceObject.getEchoClassCode()) {                        case Battery.ECHO_CLASS_CODE://                              echoPropertyList.add(new EchoProperty(Battery.EPC_OPERATION_STATUS));//                              echoPropertyList.add(new EchoProperty(Battery.EPC_OPERATION_MODE_SETTING));//                              echoPropertyList.add(new EchoProperty(Battery.EPC_MEASURED_INSTANTANEOUS_CHARGE_DISCHARGE_ELECTRIC_ENERGY));                              echoPropertyList.add(new EchoProperty(Battery.EPC_REMAINING_STORED_ELECTRICITY1));                              echoPropertyList.add(new EchoProperty(Battery.EPC_REMAINING_STORED_ELECTRICITY3));                              break;                        case ElectricVehicle.ECHO_CLASS_CODE://                              echoPropertyList.add(new EchoProperty(ElectricVehicle.EPC_OPERATION_STATUS));//                              echoPropertyList.add(new EchoProperty(ElectricVehicle.EPC_OPERATION_MODE_SETTING));//                              echoPropertyList.add(new EchoProperty(ElectricVehicle.EPC_MEASURED_INSTANTANEOUS_CHARGE_DISCHARGE_ELECTRIC_ENERGY));                              echoPropertyList.add(new EchoProperty(ElectricVehicle.EPC_REMAINING_BATTERY_CAPACITY1));                              echoPropertyList.add(new EchoProperty(ElectricVehicle.EPC_REMAINING_BATTERY_CAPACITY3));                              break;                        case HouseholdSolarPowerGeneration.ECHO_CLASS_CODE://                              echoPropertyList.add(new EchoProperty(HouseholdSolarPowerGeneration.EPC_OPERATION_STATUS));//                              echoPropertyList.add(new EchoProperty(HouseholdSolarPowerGeneration.EPC_MEASURED_INSTANTANEOUS_AMOUNT_OF_ELECTRICITY_GENERATED));                              echoPropertyList.add(new EchoProperty(HouseholdSolarPowerGeneration.EPC_MEASURED_CUMULATIVE_AMOUNT_OF_ELECTRICITY_GENERATED));                              break;                        case GeneralLighting.ECHO_CLASS_CODE://                              echoPropertyList.add(new EchoProperty(GeneralLighting.EPC_OPERATION_STATUS));                              break;                        default:                              break;                  }            }            new Thread(() -> {                  for (EchoProperty echoProperty : echoPropertyList) {                        try {                              deviceObject.get().reqGetProperty(echoProperty.epc).send();                        } catch (Exception e) {                              runOnUiThread(this::alertDeviceDisconnected);                              Log.e(Constants.ECHO_TAG, "sendRequestToUpdateData: Device disconnected.", e);                              break;                        }                  }            }).start();      }      private void updateData(boolean success, EchoProperty echoProperty) {            short echoClassCode = deviceObject.getEchoClassCode();            if (echoClassCode == Battery.ECHO_CLASS_CODE) {                  MyBatteryReceiver myBatteryReceiver = (MyBatteryReceiver) deviceObject.getReceiver();                  switch (echoProperty.epc) {                        case Battery.EPC_OPERATION_STATUS:                              OperationStatus operationStatus = success ? myBatteryReceiver.getOperationStatus() : null;                              setOperationStatusTxt(operationStatus);                              break;                        case Battery.EPC_OPERATION_MODE_SETTING:                              OperationMode operationMode = success ? myBatteryReceiver.getOperationMode() : null;                              setOperationModeTxt(operationMode);                              break;                        case Battery.EPC_MEASURED_INSTANTANEOUS_CHARGE_DISCHARGE_ELECTRIC_ENERGY:                              int instantaneous = success ? myBatteryReceiver.getInstantaneous() : ERROR;                              setInstantaneousTxt(instantaneous);                              break;                        case Battery.EPC_REMAINING_STORED_ELECTRICITY1:                              int current = success ? myBatteryReceiver.getCurrentElectricEnergy() : ERROR;                              setCurrentElectricTxt(current);                              break;                        case Battery.EPC_REMAINING_STORED_ELECTRICITY3:                              int currentPercent = success ? myBatteryReceiver.getPercentCurrent() : ERROR;                              setCurrentPercentTxt(currentPercent);                              break;                        default:                              break;                  }            } else if (echoClassCode == ElectricVehicle.ECHO_CLASS_CODE) {                  MyElectricVehicleReceiver myElectricVehicleReceiver = (MyElectricVehicleReceiver) deviceObject.getReceiver();                  switch (echoProperty.epc) {                        case ElectricVehicle.EPC_OPERATION_STATUS:                              OperationStatus operationStatus = success ? myElectricVehicleReceiver.getOperationStatus() : null;                              setOperationStatusTxt(operationStatus);                              break;                        case ElectricVehicle.EPC_OPERATION_MODE_SETTING:                              OperationMode operationMode = success ? myElectricVehicleReceiver.getOperationMode() : null;                              setOperationModeTxt(operationMode);                              break;                        case ElectricVehicle.EPC_MEASURED_INSTANTANEOUS_CHARGE_DISCHARGE_ELECTRIC_ENERGY:                              int instantaneous = success ? myElectricVehicleReceiver.getInstantaneous() : ERROR;                              setInstantaneousTxt(instantaneous);                              break;                        case ElectricVehicle.EPC_REMAINING_BATTERY_CAPACITY1:                              int current = success ? myElectricVehicleReceiver.getCurrentElectricEnergy() : ERROR;                              setCurrentElectricTxt(current);                              break;                        case ElectricVehicle.EPC_REMAINING_BATTERY_CAPACITY3:                              int currentPercent = success ? myElectricVehicleReceiver.getPercentCurrent() : ERROR;                              setCurrentPercentTxt(currentPercent);                              break;                        default:                              break;                  }            } else if (echoClassCode == HouseholdSolarPowerGeneration.ECHO_CLASS_CODE) {                  MySolarReceiver mySolarReceiver = (MySolarReceiver) deviceObject.getReceiver();                  switch (echoProperty.epc) {                        case HouseholdSolarPowerGeneration.EPC_OPERATION_STATUS:                              OperationStatus operationStatus = success ? mySolarReceiver.getOperationStatus() : null;                              setOperationStatusTxt(operationStatus);                              break;                        case HouseholdSolarPowerGeneration.EPC_MEASURED_INSTANTANEOUS_AMOUNT_OF_ELECTRICITY_GENERATED:                              int instantaneous = success ? mySolarReceiver.getInstantaneous() : ERROR;                              setInstantaneousTxt(instantaneous);                              break;                        case HouseholdSolarPowerGeneration.EPC_MEASURED_CUMULATIVE_AMOUNT_OF_ELECTRICITY_GENERATED:                              int current = success ? mySolarReceiver.getCurrentElectricEnergy() : ERROR;                              setCurrentElectricTxt(current);                              break;                        default:                              break;                  }            } else if (echoClassCode == GeneralLighting.ECHO_CLASS_CODE) {                  MyLightReceiver myLightReceiver = (MyLightReceiver) deviceObject.getReceiver();                  if (echoProperty.epc == GeneralLighting.EPC_OPERATION_STATUS) {                        OperationStatus operationStatus = success ? myLightReceiver.getOperationStatus() : null;                        setOperationStatusTxt(operationStatus);                  }            }      }      private void setupUI() {            // 1 Spinner            spinner = findViewById(R.id.spinner);            spinner.setAdapter(new MyOperationModeAdapter(this, R.layout.operation_mode_spinner, operationModeOptions));            spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {                  @Override                  public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                        if (!UIReady) {                              UIReady = true;                              return;                        }                        view.performHapticFeedback(VIRTUAL_KEY);                  }                  @Override                  public void onNothingSelected(AdapterView<?> parent) {                  }            });            // 1 Image            deviceImage = findViewById(R.id.device_img2);            // 1 Layout            configLayout = findViewById(R.id.config_layout);            // 1 Buttons            configButton = findViewById(R.id.config_btn);            // 3 Edit texts            startTime = findViewById(R.id.start_time_txt);            endTime = findViewById(R.id.end_time_txt);            instantaneousEditText = findViewById(R.id.instantaneous_edit_text);            // Otherwise, text view            deviceNameBar = findViewById(R.id.name_bar_txt);            deviceName = findViewById(R.id.name2_txt);            ipAddressTxt = findViewById(R.id.ip_address2_txt);            operationStatusTxt = findViewById(R.id.operation_status2_txt);            operationModeTxt = findViewById(R.id.operation_mode2_txt);            instantaneousTxt = findViewById(R.id.instantaneous2_txt);            currentElectricTxt = findViewById(R.id.current2_txt);            currentPercentTxt = findViewById(R.id.current_percent2_txt);      }      private String getTextResourceWithoutUnknown(int id) {            return getString(id).replace(getString(R.string.unknown), "");      }      @SuppressLint({"TextCanBeConcatenated", "SetTextI18n"})      private void setOperationStatusTxt(OperationStatus operationStatus) {            String temp = operationStatus != null ? operationStatus.name() : Constants.ERROR;            operationStatusTxt.setText(getTextResourceWithoutUnknown(R.string.operation_status_string) + temp);      }      @SuppressLint({"TextCanBeConcatenated", "SetTextI18n"})      private void setOperationModeTxt(OperationMode operationMode) {            String temp = operationMode != null ? getString(operationMode.name) : Constants.ERROR;            operationModeTxt.setText(getTextResourceWithoutUnknown(R.string.operation_mode_string) + temp);      }      @SuppressLint({"TextCanBeConcatenated", "SetTextI18n"})      public void setInstantaneousTxt(int instantaneous) {            String temp = instantaneous != ERROR ? instantaneous + " W" : Constants.ERROR;            instantaneousTxt.setText(getTextResourceWithoutUnknown(R.string.instantaneous_string) + temp);      }      @SuppressLint({"TextCanBeConcatenated", "SetTextI18n"})      public void setCurrentElectricTxt(int currentElectric) {            String temp = currentElectric != ERROR ? currentElectric + " Wh" : Constants.ERROR;            currentElectricTxt.setText(getTextResourceWithoutUnknown(R.string.current_electric_string) + temp);      }      @SuppressLint({"TextCanBeConcatenated", "SetTextI18n"})      public void setCurrentPercentTxt(int currentPercent) {            String temp = currentPercent != ERROR ? currentPercent + " %" : Constants.ERROR;            currentPercentTxt.setText(getTextResourceWithoutUnknown(R.string.current_percentage_string) + temp);      }      public void backPreviousActivity(View v) {            if (v != null) v.performHapticFeedback(VIRTUAL_KEY);            if (deviceObject != null)                  if (deviceObject.getReceiver() instanceof ResultControllable)                        ((ResultControllable) deviceObject.getReceiver()).setOnReceive(null, null);            Intent intent2 = new Intent();            setResult(2, intent2);            super.finish();      }      public void selectTime(View v) {            v.performHapticFeedback(VIRTUAL_KEY);            if (!(v instanceof EditText)) return;            final Calendar calendar = Calendar.getInstance();            int hour = calendar.get(Calendar.HOUR_OF_DAY);            int minutes = calendar.get(Calendar.MINUTE);            // Time picker dialog            TimePickerDialog picker = new MyTimerPickerDialog(DeviceActivity.this,                      (tp, sHour, sMinute) -> {                            String time = sHour + ":" + sMinute;                            ((EditText) v).setText(time);                            v.performHapticFeedback(VIRTUAL_KEY);                      }, hour, minutes, true);            picker.setCanceledOnTouchOutside(true);            picker.setButton(DialogInterface.BUTTON_POSITIVE, getString(R.string.select_btn), picker);            picker.setButton(DialogInterface.BUTTON_NEGATIVE, getString(R.string.cancel_btn), picker);            picker.show();      }      private void alertDeviceDisconnected() {            Toast.makeText(this, getString(R.string.device_disconnected), Toast.LENGTH_SHORT).show();      }      public void onClickButtonOnOff(View v) {            v.performHapticFeedback(VIRTUAL_KEY);            if (v.getId() == R.id.on_btn) EDT = EDT_OPERATION_STATUS_ON;            else if (v.getId() == R.id.off_btn) EDT = EDT_OPERATION_STATUS_OFF;            else return;            new Thread(() -> {                  try {                        deviceObject.set().reqSetOperationStatus(EDT).send();                  } catch (Exception e) {                        runOnUiThread(this::alertDeviceDisconnected);                  }            }).start();      }      @SuppressWarnings("WeakerAccess")      final class MyTimerPickerDialog extends TimePickerDialog {            public MyTimerPickerDialog(Context context, OnTimeSetListener listener, int hourOfDay, int minute, boolean is24HourView) {                  super(context, listener, hourOfDay, minute, is24HourView);            }            @Override            public void onTimeChanged(TimePicker view, int hourOfDay, int minute) {                  view.performHapticFeedback(VIRTUAL_KEY);            }      }      private class MyOperationModeAdapter extends ArrayAdapter<OperationMode> {            private int resource;            MyOperationModeAdapter(@NonNull Context context, @LayoutRes int resource, @NonNull OperationMode[] objects) {                  super(context, resource, objects);                  this.resource = resource;            }            @Override            public @NonNull            View getView(int position, @androidx.annotation.Nullable View convertView, @NonNull ViewGroup parent) {                  return initView(position, convertView, parent);            }            @Override            public View getDropDownView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {                  return initView(position, convertView, parent);            }            private View initView(int position, View convertView, ViewGroup parent) {                  if (convertView == null) {                        convertView = LayoutInflater.from(getContext()).inflate(                                  resource, parent, false                        );                  }                  final TextView operationModeNameTxt;                  final TextView operationModeValueTxt;                  operationModeNameTxt = convertView.findViewById(R.id.operation_mode_name);                  operationModeValueTxt = convertView.findViewById(R.id.operation_mode_value);                  final OperationMode operationMode = requireNonNull(getItem(position));                  String value = "0x" + Integer.toHexString(operationMode.value & 0xff);                  String name = getString(requireNonNull(operationMode).name);                  operationModeNameTxt.setText(name);                  operationModeValueTxt.setText(value);                  return convertView;            }      }}