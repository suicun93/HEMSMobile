package AView;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.res.Resources;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.recyclerview.widget.RecyclerView;import com.sonycsl.echo.eoj.device.DeviceObject;import com.sonycsl.echo.eoj.device.housingfacilities.Battery;import com.sonycsl.echo.eoj.device.housingfacilities.ElectricVehicle;import com.sonycsl.echo.eoj.device.housingfacilities.GeneralLighting;import com.sonycsl.echo.eoj.device.housingfacilities.HouseholdSolarPowerGeneration;import java.util.List;import Common.Constants;import Main.EchoController;import Model.MyEchoDevices;import Model.OperationMode;import Model.OperationStatus;import Receiver.MyBatteryReceiver;import Receiver.MyElectricVehicleReceiver;import Receiver.MyLightReceiver;import Receiver.MySolarReceiver;import static AView.R.string.current_electric_string;import static AView.R.string.device_disconnected;import static AView.R.string.instantaneous_string;import static AView.R.string.ip_address_string;import static AView.R.string.operation_mode_string;import static AView.R.string.operation_status_string;import static AView.R.string.unknown;import static android.view.HapticFeedbackConstants.VIRTUAL_KEY;public class DevicesAdapter extends RecyclerView.Adapter<DevicesAdapter.DeviceViewHolder> {      // Store a member variable for the devices      private List<DeviceObject> mDevices;      private Context context;      private static final int ERROR = -1;      // Pass in the device array into the constructor      DevicesAdapter() {            mDevices = EchoController.listDevice;      }      // Usually involves inflating a layout from XML and returning the holder      @androidx.annotation.NonNull      @Override      public DeviceViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {            context = parent.getContext();            LayoutInflater inflater = LayoutInflater.from(context);            // Inflate the custom layout            View deviceView = inflater.inflate(R.layout.item_device, parent, false);            // Return a new holder instance            return new DeviceViewHolder(deviceView);      }      // Involves populating data into the item through holder      @Override      public void onBindViewHolder(@androidx.annotation.NonNull DeviceViewHolder dvViHolder, int position) {            // Get the data model based on position            DeviceObject deviceObject = mDevices.get(position);            MyEchoDevices device = MyEchoDevices.from(deviceObject);            // Set item views based on your views and data model            // Set name, ipAddress, operation Status            dvViHolder.nameTextView.setText(device.name());            dvViHolder.setIpAddressTxt(deviceObject.getNode().getAddressStr());            // Set Image            dvViHolder.deviceImg.setImageResource(device.image());            // Set Information            switch (deviceObject.getEchoClassCode()) {                  case Battery.ECHO_CLASS_CODE:                        MyBatteryReceiver myBatteryReceiver = (MyBatteryReceiver) deviceObject.getReceiver();                        dvViHolder.setOperationStatusTxt(myBatteryReceiver.getOperationStatus());                        dvViHolder.setOperationModeTxt(myBatteryReceiver.getOperationMode());                        dvViHolder.setInstantaneousTxt(myBatteryReceiver.getInstantaneous());                        dvViHolder.setCurrentTxt(myBatteryReceiver.getCurrentElectricEnergy());                        dvViHolder.operationModeTxt.setVisibility(View.VISIBLE);                        dvViHolder.instantaneousTxt.setVisibility(View.VISIBLE);                        dvViHolder.currentTxt.setVisibility(View.VISIBLE);                        myBatteryReceiver.setOnReceive((success, echoProperty) -> ((Activity) context).runOnUiThread(() -> {                              switch (echoProperty.epc) {                                    case DeviceObject.EPC_OPERATION_STATUS:                                          if (success)                                                dvViHolder.setOperationStatusTxt(myBatteryReceiver.getOperationStatus());                                          else dvViHolder.setOperationStatusTxt(null);                                          break;                                    case Battery.EPC_OPERATION_MODE_SETTING:                                          if (success)                                                dvViHolder.setOperationModeTxt(myBatteryReceiver.getOperationMode());                                          else dvViHolder.setOperationModeTxt(null);                                          break;                                    case Battery.EPC_MEASURED_INSTANTANEOUS_CHARGE_DISCHARGE_ELECTRIC_ENERGY:                                          if (success)                                                dvViHolder.setInstantaneousTxt(myBatteryReceiver.getInstantaneous());                                          else dvViHolder.setInstantaneousTxt(ERROR);                                          break;                                    case Battery.EPC_REMAINING_STORED_ELECTRICITY1:                                          if (success)                                                dvViHolder.setCurrentTxt(myBatteryReceiver.getCurrentElectricEnergy());                                          else dvViHolder.setCurrentTxt(ERROR);                                          break;                                    default:                                          break;                              }                        }));                        new Thread(() -> {                              Battery battery = (Battery) deviceObject;                              try {                                    battery.get().reqGetOperationStatus().send();                                    battery.get().reqGetOperationModeSetting().send();                                    battery.get().reqGetMeasuredInstantaneousChargeDischargeElectricEnergy().send();                                    battery.get().reqGetRemainingStoredElectricity1().send(); // E2                              } catch (Exception e) {                                    Log.e(Constants.ECHO_TAG, "onBindViewHolder: First time send after set On Receive error", e);                              }                        }).start();                        break;                  case ElectricVehicle.ECHO_CLASS_CODE:                        MyElectricVehicleReceiver myElectricVehicleReceiver = (MyElectricVehicleReceiver) deviceObject.getReceiver();                        dvViHolder.setOperationStatusTxt(myElectricVehicleReceiver.getOperationStatus());                        dvViHolder.setOperationModeTxt(myElectricVehicleReceiver.getOperationMode());                        dvViHolder.setInstantaneousTxt(myElectricVehicleReceiver.getInstantaneous());                        dvViHolder.setCurrentTxt(myElectricVehicleReceiver.getCurrentElectricEnergy());                        dvViHolder.operationModeTxt.setVisibility(View.VISIBLE);                        dvViHolder.instantaneousTxt.setVisibility(View.VISIBLE);                        dvViHolder.currentTxt.setVisibility(View.VISIBLE);                        myElectricVehicleReceiver.setOnReceive((success, echoProperty) -> ((Activity) context).runOnUiThread(() -> {                              switch (echoProperty.epc) {                                    case DeviceObject.EPC_OPERATION_STATUS:                                          if (success)                                                dvViHolder.setOperationStatusTxt(myElectricVehicleReceiver.getOperationStatus());                                          else dvViHolder.setOperationStatusTxt(null);                                          break;                                    case ElectricVehicle.EPC_OPERATION_MODE_SETTING:                                          if (success)                                                dvViHolder.setOperationModeTxt(myElectricVehicleReceiver.getOperationMode());                                          else dvViHolder.setOperationModeTxt(null);                                          break;                                    case ElectricVehicle.EPC_MEASURED_INSTANTANEOUS_CHARGE_DISCHARGE_ELECTRIC_ENERGY:                                          if (success)                                                dvViHolder.setInstantaneousTxt(myElectricVehicleReceiver.getInstantaneous());                                          else dvViHolder.setInstantaneousTxt(ERROR);                                          break;                                    case ElectricVehicle.EPC_REMAINING_BATTERY_CAPACITY1:                                          if (success)                                                dvViHolder.setCurrentTxt(myElectricVehicleReceiver.getCurrentElectricEnergy());                                          else dvViHolder.setCurrentTxt(ERROR);                                          break;                                    default:                                          break;                              }                        }));                        new Thread(() -> {                              ElectricVehicle ev = (ElectricVehicle) deviceObject;                              try {                                    ev.get().reqGetOperationStatus().send();                                    ev.get().reqGetOperationModeSetting().send();                                    ev.get().reqGetMeasuredInstantaneousChargeDischargeElectricEnergy().send();                                    ev.get().reqGetRemainingBatteryCapacity1().send(); // E2                              } catch (Exception e) {                                    Log.e(Constants.ECHO_TAG, "onBindViewHolder: First time send after set On Receive error", e);                              }                        }).start();                        break;                  case HouseholdSolarPowerGeneration.ECHO_CLASS_CODE:                        MySolarReceiver mySolarReceiver = (MySolarReceiver) deviceObject.getReceiver();                        dvViHolder.setOperationStatusTxt(mySolarReceiver.getOperationStatus());                        dvViHolder.setInstantaneousTxt(mySolarReceiver.getInstantaneous());                        dvViHolder.setCurrentTxt(mySolarReceiver.getCurrentElectricEnergy());                        dvViHolder.operationModeTxt.setVisibility(View.GONE);                        dvViHolder.instantaneousTxt.setVisibility(View.VISIBLE);                        dvViHolder.currentTxt.setVisibility(View.VISIBLE);                        mySolarReceiver.setOnReceive((success, echoProperty) -> ((Activity) context).runOnUiThread(() -> {                              switch (echoProperty.epc) {                                    case DeviceObject.EPC_OPERATION_STATUS:                                          if (success)                                                dvViHolder.setOperationStatusTxt(mySolarReceiver.getOperationStatus());                                          else dvViHolder.setOperationStatusTxt(null);                                          break;                                    case HouseholdSolarPowerGeneration.EPC_MEASURED_INSTANTANEOUS_AMOUNT_OF_ELECTRICITY_GENERATED:                                          if (success)                                                dvViHolder.setInstantaneousTxt(mySolarReceiver.getInstantaneous());                                          else dvViHolder.setInstantaneousTxt(ERROR);                                          break;                                    case HouseholdSolarPowerGeneration.EPC_MEASURED_CUMULATIVE_AMOUNT_OF_ELECTRICITY_GENERATED:                                          if (success)                                                dvViHolder.setCurrentTxt(mySolarReceiver.getCurrentElectricEnergy());                                          else dvViHolder.setCurrentTxt(ERROR);                                          break;                                    default:                                          break;                              }                        }));                        new Thread(() -> {                              HouseholdSolarPowerGeneration solar = (HouseholdSolarPowerGeneration) deviceObject;                              try {                                    solar.get().reqGetOperationStatus().send();                                    solar.get().reqGetMeasuredInstantaneousAmountOfElectricityGenerated().send();                                    solar.get().reqGetMeasuredCumulativeAmountOfElectricityGenerated().send();                              } catch (Exception e) {                                    Log.e(Constants.ECHO_TAG, "onBindViewHolder: First time send after set On Receive error", e);                              }                        }).start();                        break;                  case GeneralLighting.ECHO_CLASS_CODE:                        MyLightReceiver myLightReceiver = (MyLightReceiver) deviceObject.getReceiver();                        dvViHolder.setOperationStatusTxt(myLightReceiver.getOperationStatus());                        dvViHolder.operationModeTxt.setVisibility(View.INVISIBLE);                        dvViHolder.instantaneousTxt.setVisibility(View.INVISIBLE);                        dvViHolder.currentTxt.setVisibility(View.INVISIBLE);                        myLightReceiver.setOnReceive((success, echoProperty) -> ((Activity) context).runOnUiThread(() -> {                              if (echoProperty.epc == DeviceObject.EPC_OPERATION_STATUS) {                                    if (success)                                          dvViHolder.setOperationStatusTxt(myLightReceiver.getOperationStatus());                                    else dvViHolder.setOperationStatusTxt(null);                              }                        }));                        new Thread(() -> {                              GeneralLighting lighting = (GeneralLighting) deviceObject;                              try {                                    lighting.get().reqGetOperationStatus().send();                              } catch (Exception e) {                                    Log.e(Constants.ECHO_TAG, "onBindViewHolder: First time send after set On Receive error", e);                              }                        }).start();                  default:                        dvViHolder.operationModeTxt.setVisibility(View.INVISIBLE);                        dvViHolder.instantaneousTxt.setVisibility(View.INVISIBLE);                        dvViHolder.currentTxt.setVisibility(View.INVISIBLE);                        break;            }            // Set on click event.            dvViHolder.itemView.setOnClickListener(v -> {                  v.performHapticFeedback(VIRTUAL_KEY);                  try {                        Intent i = new Intent(context, DeviceActivity.class);                        i.putExtra(Constants.PositionKey.value, "" + position);                        i.putExtra(Constants.IpAddressKey.value, deviceObject.getNode().getAddressStr());                        i.putExtra(Constants.EOJKey.value, deviceObject.getEchoClassCode());                        context.startActivity(i);                  } catch (Exception e) {                        Log.e(Constants.ECHO_TAG, "onBindViewHolder: ", e);                        alertDeviceDisconnected();                  }            });      }      private void alertDeviceDisconnected() {            Toast.makeText(context, context.getString(device_disconnected), Toast.LENGTH_SHORT).show();      }      // Returns the total count of items in the list      @Override      public int getItemCount() {            return mDevices.size();      }      // Provide a direct reference to each of the views within a data item      // Used to cache the views within the item layout for fast access      class DeviceViewHolder extends RecyclerView.ViewHolder {            TextView nameTextView;            ImageView deviceImg;            TextView ipAddressTxt, operationStatusTxt, operationModeTxt, currentTxt, instantaneousTxt;            Resources resources;            DeviceViewHolder(View itemView) {                  super(itemView);                  resources = itemView.getResources();                  nameTextView = itemView.findViewById(R.id.name_txt);                  deviceImg = itemView.findViewById(R.id.device_image);                  ipAddressTxt = itemView.findViewById(R.id.ipaddress_txt);                  operationStatusTxt = itemView.findViewById(R.id.operation_status_txt);                  operationModeTxt = itemView.findViewById(R.id.operation_mode_txt);                  currentTxt = itemView.findViewById(R.id.current_txt);                  instantaneousTxt = itemView.findViewById(R.id.instantaneous_txt);            }            void setIpAddressTxt(String ipAddressTxt) {                  String temp = resources.getString(ip_address_string).replace(resources.getString(unknown), "") + ipAddressTxt;                  this.ipAddressTxt.setText(temp);            }            void setOperationStatusTxt(OperationStatus operationStatus) {                  String temp = resources.getString(operation_status_string).replace(resources.getString(unknown), "") + (operationStatus != null ? operationStatus.name() : Constants.ERROR);                  this.operationStatusTxt.setText(temp);            }            void setOperationModeTxt(OperationMode operationMode) {                  String temp = resources.getString(operation_mode_string).replace(resources.getString(unknown), "") + (operationMode != null ? operationMode.japaneseName : Constants.ERROR);                  this.operationModeTxt.setText(temp);            }            void setInstantaneousTxt(int instantaneous) {                  String temp = resources.getString(instantaneous_string).replace(resources.getString(unknown), "") + (instantaneous != ERROR ? instantaneous : Constants.ERROR) + " W";                  this.instantaneousTxt.setText(temp);            }            void setCurrentTxt(int current) {                  String temp = resources.getString(current_electric_string).replace(resources.getString(unknown), "") + (current != ERROR ? current : Constants.ERROR) + " Wh";                  this.currentTxt.setText(temp);            }      }}