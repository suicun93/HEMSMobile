package AView;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.recyclerview.widget.RecyclerView;import com.sonycsl.echo.eoj.device.DeviceObject;import com.sonycsl.echo.eoj.device.housingfacilities.Battery;import com.sonycsl.echo.eoj.device.housingfacilities.ElectricVehicle;import com.sonycsl.echo.eoj.device.housingfacilities.HouseholdSolarPowerGeneration;import java.util.List;import Common.Vibration;import Main.EchoController;import Model.MyEchoDevices;import static Model.MyEchoDevices.BATTERY;import static Model.MyEchoDevices.EV;import static Model.MyEchoDevices.SOLAR;import static Model.MyEchoDevices.UNKNOWN;public class DevicesAdapter extends RecyclerView.Adapter<DevicesAdapter.ViewHolder> {      // Store a member variable for the devices      private List<DeviceObject> mDevices;      private Context context;      // Pass in the device array into the constructor      public DevicesAdapter() {            mDevices = EchoController.listDevice();      }      // Usually involves inflating a layout from XML and returning the holder      @Override      public DevicesAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {            context = parent.getContext();            LayoutInflater inflater = LayoutInflater.from(context);            // Inflate the custom layout            View deviceView = inflater.inflate(R.layout.item_device, parent, false);            // Return a new holder instance            ViewHolder viewHolder = new ViewHolder(deviceView);            return viewHolder;      }      // Involves populating data into the item through holder      @Override      public void onBindViewHolder(DevicesAdapter.ViewHolder viewHolder, int position) {            // Get the data model based on position            DeviceObject deviceObject = mDevices.get(position);            MyEchoDevices device = MyEchoDevices.from(deviceObject);            // Set item views based on your views and data model            // Set name, ipAddress, operation Status            try {                  viewHolder.nameTextView.setText(device.name());                  viewHolder.setIpAddressTxt(deviceObject.getNode().getAddressStr());                  viewHolder.setOperationStatusTxt(device.operationStatus.name());                  // Set Image                  if (device != UNKNOWN) {                        viewHolder.deviceImg.setImageResource(device.image());                  }                  // Set Information                  if (device != MyEchoDevices.UNKNOWN) {                        switch (device) {                              case BATTERY:                                    viewHolder.setOperationModeTxt(device.operationMode.japaneseName);                                    viewHolder.setInstantaneousTxt("" + device.d3 + " W");                                    viewHolder.setCurrentTxt("" + device.e2 + " Wh");                                    viewHolder.operationModeTxt.setVisibility(View.VISIBLE);                                    viewHolder.instantaneousTxt.setVisibility(View.VISIBLE);                                    viewHolder.currentTxt.setVisibility(View.VISIBLE);                                    new Thread(() -> {                                          try {                                                synchronized (BATTERY) {                                                      ((Battery) deviceObject).get().reqGetRemainingStoredElectricity1().send(); // E2                                                      BATTERY.wait(100);                                                }                                                ((Activity) context).runOnUiThread(() -> {                                                      viewHolder.setCurrentTxt("" + device.e2 + " Wh");                                                });                                          } catch (Exception e) {                                                ((Activity) context).runOnUiThread(() -> {                                                      viewHolder.setCurrentTxt("エラー");                                                });                                          }                                    }).start();                                    break;                              case EV:                                    viewHolder.setOperationModeTxt(device.operationMode.japaneseName);                                    viewHolder.setInstantaneousTxt("" + device.d3 + " W");                                    viewHolder.setCurrentTxt("" + device.e2 + " Wh");                                    viewHolder.operationModeTxt.setVisibility(View.VISIBLE);                                    viewHolder.instantaneousTxt.setVisibility(View.VISIBLE);                                    viewHolder.currentTxt.setVisibility(View.VISIBLE);                                    new Thread(() -> {                                          try {                                                synchronized (EV) {                                                      ((ElectricVehicle) deviceObject).get().reqGetRemainingBatteryCapacity1().send(); // E2                                                      EV.wait();                                                }                                                ((Activity) context).runOnUiThread(() -> {                                                      viewHolder.setCurrentTxt("" + device.e2 + " Wh");                                                });                                          } catch (Exception e) {                                                ((Activity) context).runOnUiThread(() -> {                                                      viewHolder.setCurrentTxt("エラー");                                                });                                          }                                    }).start();                                    break;                              case SOLAR:                                    viewHolder.operationModeTxt.setVisibility(View.GONE);                                    viewHolder.setInstantaneousTxt("" + device.e0 + " W");                                    viewHolder.setCurrentTxt("" + device.e1 + " Wh");                                    viewHolder.instantaneousTxt.setVisibility(View.VISIBLE);                                    viewHolder.currentTxt.setVisibility(View.VISIBLE);                                    new Thread(() -> {                                          try {                                                synchronized (SOLAR) {                                                      ((HouseholdSolarPowerGeneration) deviceObject).get().reqGetMeasuredCumulativeAmountOfElectricityGenerated().send(); // E1                                                      SOLAR.wait();                                                }                                                ((Activity) context).runOnUiThread(() -> {                                                      viewHolder.setCurrentTxt("" + device.e1 + " Wh");                                                });                                          } catch (Exception e) {                                                ((Activity) context).runOnUiThread(() -> {                                                      viewHolder.setCurrentTxt("エラー");                                                });                                          }                                    }).start();                                    break;                              default:                                    break;                        }                  }                  // Set on click event.                  viewHolder.itemView.setOnClickListener(v -> {                        Vibration.vibrate(context);                        try {                              Intent i = new Intent(context, DeviceActivity.class);                              i.putExtra("position", "" + position);                              i.putExtra("ip", deviceObject.getNode().getAddressStr());                              i.putExtra("eoj", deviceObject.getEchoClassCode());                              context.startActivity(i);                        } catch (Exception e) {                              System.err.println("Error: " + e.getMessage());                              Toast.makeText(context, "デバイスが切断されました.", Toast.LENGTH_LONG).show();                              notifyItemRemoved(position);                        }                  });            } catch (Exception e) {                  // Device disappeared but data is still loading => null object                  System.err.println(e.getMessage());            }      }      // Returns the total count of items in the list      @Override      public int getItemCount() {            return mDevices.size();      }      // Provide a direct reference to each of the views within a data item      // Used to cache the views within the item layout for fast access      public class ViewHolder extends RecyclerView.ViewHolder {            public TextView nameTextView;            public ImageView deviceImg;            public TextView ipAddressTxt, operationStatusTxt, operationModeTxt, currentTxt, instantaneousTxt;            public void setIpAddressTxt(String ipAddressTxt) {                  this.ipAddressTxt.setText(itemView.getResources().getString(R.string.ip_address_string).replace("分からない", "") + ipAddressTxt);            }            public void setOperationStatusTxt(String operationStatusTxt) {                  this.operationStatusTxt.setText(itemView.getResources().getString(R.string.operation_status_string).replace("分からない", "") + operationStatusTxt);            }            public void setOperationModeTxt(String operationModeTxt) {                  this.operationModeTxt.setText(itemView.getResources().getString(R.string.operation_mode_string).replace("分からない", "") + operationModeTxt);            }            public void setInstantaneousTxt(String instantaneousTxt) {                  this.instantaneousTxt.setText(itemView.getResources().getString(R.string.instantaneous_string).replace("分からない", "") + instantaneousTxt);            }            public void setCurrentTxt(String currentTxt) {                  this.currentTxt.setText(itemView.getResources().getString(R.string.current_electric_string).replace("分からない", "") + currentTxt);            }            public ViewHolder(View itemView) {                  super(itemView);                  nameTextView = itemView.findViewById(R.id.name_txt);                  deviceImg = itemView.findViewById(R.id.device_image);                  ipAddressTxt = itemView.findViewById(R.id.ipaddress_txt);                  operationStatusTxt = itemView.findViewById(R.id.operation_status_txt);                  operationModeTxt = itemView.findViewById(R.id.operation_mode_txt);                  currentTxt = itemView.findViewById(R.id.current_txt);                  instantaneousTxt = itemView.findViewById(R.id.instantaneous_txt);            }      }}