package AView;import android.content.Context;import android.content.Intent;import android.content.res.Resources;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.ImageView;import android.widget.TextView;import androidx.recyclerview.widget.RecyclerView;import com.sonycsl.echo.eoj.device.DeviceObject;import com.sonycsl.echo.eoj.device.housingfacilities.Battery;import com.sonycsl.echo.eoj.device.housingfacilities.ElectricVehicle;import com.sonycsl.echo.eoj.device.housingfacilities.HouseholdSolarPowerGeneration;import java.io.IOException;import java.util.List;import Main.EchoController;import Model.MyEchoDevices;import static Model.MyEchoDevices.BATTERY;import static Model.MyEchoDevices.EV;import static Model.MyEchoDevices.SOLAR;import static Model.MyEchoDevices.UNKNOWN;public class DevicesAdapter extends RecyclerView.Adapter<DevicesAdapter.ViewHolder> {      public Button btnUpdate = null;      // Store a member variable for the devices      private List<DeviceObject> mDevices;      // Pass in the device array into the constructor      public DevicesAdapter() {            mDevices = EchoController.listDevice();      }      // Usually involves inflating a layout from XML and returning the holder      @Override      public DevicesAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {            Context context = parent.getContext();            LayoutInflater inflater = LayoutInflater.from(context);            // Inflate the custom layout            View deviceView = inflater.inflate(R.layout.item_device, parent, false);            // Return a new holder instance            ViewHolder viewHolder = new ViewHolder(deviceView);            return viewHolder;      }      // Involves populating data into the item through holder      @Override      public void onBindViewHolder(DevicesAdapter.ViewHolder viewHolder, int position) {            // Get the data model based on position            DeviceObject deviceObject = mDevices.get(position);            MyEchoDevices device = MyEchoDevices.from(deviceObject);            if (device != MyEchoDevices.UNKNOWN) {                  try {                        switch (device) {                              case BATTERY:                                    synchronized (BATTERY) {                                          ((Battery) deviceObject).get().reqGetRemainingStoredElectricity1().send(); // E2                                          BATTERY.wait();                                          ((Battery) deviceObject).get().reqGetRemainingStoredElectricity3().send(); // E4                                          BATTERY.wait();                                    }                                    break;                              case EV:                                    synchronized (EV) {                                          ((ElectricVehicle) deviceObject).get().reqGetRemainingBatteryCapacity1().send(); // E2                                          EV.wait();                                          ((ElectricVehicle) deviceObject).get().reqGetRemainingBatteryCapacity3().send(); // E4                                          EV.wait();                                    }                                    break;                              case SOLAR:                                    ((HouseholdSolarPowerGeneration) deviceObject).get().reqGetMeasuredCumulativeAmountOfElectricityGenerated().send(); // E1                                    synchronized (SOLAR) {                                          SOLAR.wait();                                    }                                    break;                              default:                                    break;                        }                  } catch (IOException | InterruptedException e) {                        viewHolder.nameTextView.setText(device.name());                        viewHolder.setIpAddressTxt(deviceObject.getNode().getAddressStr());                        viewHolder.operationStatusTxt.setText("エラー: " + e.getMessage());                        return;                  }            }            // Set item views based on your views and data model            viewHolder.nameTextView.setText(device.name());            viewHolder.setIpAddressTxt(deviceObject.getNode().getAddressStr());            viewHolder.setOperationStatusTxt(device.operationStatus.name());            // Set Image            if (device != UNKNOWN) {                  viewHolder.deviceImg.setImageResource(device.image());            }            // Set information            switch (device) {                  case EV:                  case BATTERY:                        viewHolder.operationModeTxt.setVisibility(View.VISIBLE);                        viewHolder.instantaneousTxt.setVisibility(View.VISIBLE);                        viewHolder.currentTxt.setVisibility(View.VISIBLE);                        viewHolder.setOperationModeTxt(device.operationMode.name());                        viewHolder.setInstantaneousTxt("" + device.d3);                        viewHolder.setCurrentTxt("" + device.e2);                        break;                  case SOLAR:                        viewHolder.operationModeTxt.setVisibility(View.GONE);                        viewHolder.instantaneousTxt.setVisibility(View.VISIBLE);                        viewHolder.currentTxt.setVisibility(View.VISIBLE);                        viewHolder.setInstantaneousTxt("" + device.e0);                        viewHolder.setCurrentTxt("" + device.e1);                        break;                  default:                        break;            }            viewHolder.itemView.setOnClickListener(new View.OnClickListener() {                  @Override                  public void onClick(View v) {                        Intent i = new Intent(viewHolder.itemView.getContext(), DeviceActivity.class);                        i.putExtra("device", position);                        viewHolder.itemView.getContext().startActivity(i);                  }            });//            Button button = viewHolder.messageButton;//            button.setText(device.operationStatus.name());//            button.setEnabled(true);      }      // Returns the total count of items in the list      @Override      public int getItemCount() {            return mDevices.size();      }      // Provide a direct reference to each of the views within a data item      // Used to cache the views within the item layout for fast access      public class ViewHolder extends RecyclerView.ViewHolder {            public TextView nameTextView;            public ImageView deviceImg;            public TextView ipAddressTxt, operationStatusTxt, operationModeTxt, currentTxt, instantaneousTxt;//            public Button messageButton;            public void setIpAddressTxt(String ipAddressTxt) {                  this.ipAddressTxt.setText(itemView.getResources().getString(R.string.ip_address_string).replace("分からない", "") + ipAddressTxt);            }            public void setOperationStatusTxt(String operationStatusTxt) {                  this.operationStatusTxt.setText(itemView.getResources().getString(R.string.operation_status_string).replace("分からない", "") + operationStatusTxt);            }            public void setOperationModeTxt(String operationModeTxt) {                  this.operationModeTxt.setText(itemView.getResources().getString(R.string.operation_mode_string).replace("分からない", "") + operationModeTxt);            }            public void setInstantaneousTxt(String instantaneousTxt) {                  this.instantaneousTxt.setText(itemView.getResources().getString(R.string.instantaneous_string).replace("分からない", "") + instantaneousTxt);            }            public void setCurrentTxt(String currentTxt) {                  this.currentTxt.setText(itemView.getResources().getString(R.string.current_electric_string).replace("分からない", "") + currentTxt);            }            public ViewHolder(View itemView) {                  super(itemView);                  nameTextView = (TextView) itemView.findViewById(R.id.name_txt);                  deviceImg = (ImageView) itemView.findViewById(R.id.device_image);                  ipAddressTxt = (TextView) itemView.findViewById(R.id.ipaddress_txt);                  operationStatusTxt = (TextView) itemView.findViewById(R.id.operation_status_txt);                  operationModeTxt = (TextView) itemView.findViewById(R.id.operation_mode_txt);                  currentTxt = (TextView) itemView.findViewById(R.id.current_txt);                  instantaneousTxt = (TextView) itemView.findViewById(R.id.instantaneous_txt);//                  messageButton = (Button) itemView.findViewById(R.id.message_button);            }      }}